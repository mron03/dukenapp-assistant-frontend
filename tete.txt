app.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { ChatProvider } from './contexts/ChatContext';
import Header from './components/Layout/Header';
import Sidebar from './components/Layout/Sidebar';
import Login from './components/Auth/Login';
import CallbackHandler from './components/Auth/CallbackHandler';
import ChatWindow from './components/Chat/ChatWindow';
import './styles/index.css';

// Protected route component
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { authState } = useAuth();
  
  if (authState.loading) {
    return <div className="loading">Loading...</div>;
  }
  
  if (!authState.isAuthenticated) {
    return <Navigate to="/login" />;
  }
  
  return <>{children}</>;
};

// Dashboard component
const Dashboard: React.FC = () => {
  return (
    <div className="dashboard">
      <Sidebar />
      <ChatWindow />
    </div>
  );
};

const App: React.FC = () => {
  return (
    <Router>
      <AuthProvider>
        <div className="app">
          <Header />
          <Routes>
            <Route path="/login" element={<Login />} />
            <Route path="/auth/callback" element={<CallbackHandler />} />
            <Route path="/auth/success" element={<CallbackHandler />} />
            <Route path="/auth/error" element={<CallbackHandler />} />
            <Route
              path="/dashboard"
              element={
                <ProtectedRoute>
                  <ChatProvider>
                    <Dashboard />
                  </ChatProvider>
                </ProtectedRoute>
              }
            />
            <Route path="/" element={<Navigate to="/dashboard" />} />
          </Routes>
        </div>
      </AuthProvider>
    </Router>
  );
};

export default App;

index.tsx:
    <App />


services/api.ts
import axios from 'axios';

// Enable dynamic API URL loading from the current hostname if using ngrok
const determineApiUrl = () => {
  const hostname = window.location.hostname;
  
  // Check if we're on a ngrok domain
  if (hostname.includes('ngrok')) {
    return `https://${hostname}/api/v1`;
  }
  
  // Default fallback
  return process.env.REACT_APP_API_URL || 'http://localhost:8000';
};

const API_URL = determineApiUrl();

console.log('Using API URL:', API_URL);

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add request interceptor to attach auth token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export default api;
services/auth.ts:
import api from './api';
import { User } from '../types';

export const handleCallback = async (code: string): Promise<string> => {
  try {
    // Try to use a dedicated token endpoint if available
    const response = await api.post('/auth/token', { code });
    const { access_token } = response.data;
    
    // Store the token
    localStorage.setItem('accessToken', access_token);
    
    return access_token;
  } catch (error) {
    console.warn('Token endpoint not available, using direct callback handling');
    
    // Fallback - store the code since the backend already processed it
    localStorage.setItem('instagram_code', code);
    
    // Generate temp token
    const tempToken = 'temp_' + Math.random().toString(36).substring(7);
    localStorage.setItem('accessToken', tempToken);
    
    return tempToken;
  }
};

export const getAuthUser = async (): Promise<User> => {
  try {
    const response = await api.get('/user/me');
    return response.data;
  } catch (error) {
    console.warn('User endpoint not available, using mock data');
    
    // Create a mock user when endpoint not available
    return {
      id: localStorage.getItem('instagram_user_id') || 'temp_user_id',
      username: 'Instagram User'
    };
  }
};

services/chat.ts:
import api from './api';
import { Chat, Message } from '../types';

export const getChats = async (): Promise<Chat[]> => {
  // Add timeout to fail gracefully if backend doesn't respond
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);
  
  try {
    const response = await api.get('/chats', { 
      signal: controller.signal 
    });
    clearTimeout(timeoutId);
    return response.data;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

export const getChatMessages = async (chatId: string): Promise<Message[]> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);
  
  try {
    const response = await api.get(`/chats/${chatId}/messages`, { 
      signal: controller.signal 
    });
    clearTimeout(timeoutId);
    return response.data;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

export const sendMessage = async (chatId: string, content: string): Promise<Message> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);
  
  try {
    const response = await api.post(`/chats/${chatId}/messages`, 
      { content },
      { signal: controller.signal }
    );
    clearTimeout(timeoutId);
    return response.data;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

export const toggleAI = async (chatId: string, active: boolean): Promise<void> => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);
  
  try {
    await api.put(`/chats/${chatId}/ai-toggle`, 
      { active },
      { signal: controller.signal }
    );
    clearTimeout(timeoutId);
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};


types/index.ts:
export interface User {
    id: string;
    username: string;
    profile_picture?: string;
}

export interface Message {
    id: string;
    sender_id: string;
    content: string;
    timestamp: string;
    is_ai_generated: boolean;
}

export interface Chat {
    id: string;
    user: User;
    messages: Message[];
    is_ai_active: boolean;
    last_message?: Message;
    unread_count: number;
}

export interface AuthState {
    isAuthenticated: boolean;
    user: User | null;
    loading: boolean;
    error: string | null;
}


contexts/AuthContext.tsx:
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, AuthState } from '../types';
import { getAuthUser } from '../services/auth';

interface AuthContextType {
  authState: AuthState;
  login: () => void;
  logout: () => void;
  setUser: (user: User) => void;
}

const initialAuthState: AuthState = {
  isAuthenticated: false,
  user: null,
  loading: true,
  error: null
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>(initialAuthState);

  useEffect(() => {
    // Check if user is already authenticated
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem('accessToken');
        if (token) {
          const user = await getAuthUser();
          setAuthState({
            isAuthenticated: true,
            user,
            loading: false,
            error: null
          });
        } else {
          setAuthState({
            ...initialAuthState,
            loading: false
          });
        }
      } catch (error) {
        setAuthState({
          isAuthenticated: false,
          user: null,
          loading: false,
          error: 'Authentication failed'
        });
      }
    };

    checkAuth();
  }, []);

  const login = () => {
    // Redirect to backend auth endpoint
    window.location.href = `${process.env.REACT_APP_API_URL}/auth/instagram`;
  };

  const logout = () => {
    localStorage.removeItem('accessToken');
    setAuthState({
      isAuthenticated: false,
      user: null,
      loading: false,
      error: null
    });
  };

  const setUser = (user: User) => {
    setAuthState({
      isAuthenticated: true,
      user,
      loading: false,
      error: null
    });
  };

  return (
    <AuthContext.Provider value={{ authState, login, logout, setUser }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


contexts/ChatContext.tsx:
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Chat } from '../types';
import { getChats, sendMessage, toggleAI } from '../services/chat';

interface ChatContextType {
  chats: Chat[];
  activeChat: Chat | null;
  loading: boolean;
  error: string | null;
  setActiveChat: (chatId: string) => void;
  sendNewMessage: (content: string) => Promise<void>;
  toggleAIActive: (chatId: string, active: boolean) => Promise<void>;
}

const ChatContext = createContext<ChatContextType | undefined>(undefined);

// Mock data for demo when backend isn't fully available
const MOCK_CHATS: Chat[] = [
  {
    id: "1",
    user: {
      id: "user1",
      username: "john_doe",
      profile_picture: "https://via.placeholder.com/150"
    },
    messages: [
      {
        id: "msg1",
        sender_id: "user1",
        content: "Hey, I'm interested in your product!",
        timestamp: new Date(Date.now() - 3600000).toISOString(),
        is_ai_generated: false
      },
      {
        id: "msg2",
        sender_id: "admin",
        content: "Thanks for reaching out! What would you like to know?",
        timestamp: new Date(Date.now() - 3500000).toISOString(),
        is_ai_generated: false
      },
      {
        id: "msg3",
        sender_id: "user1",
        content: "What are the pricing options?",
        timestamp: new Date(Date.now() - 3400000).toISOString(),
        is_ai_generated: false
      },
      {
        id: "msg4",
        sender_id: "admin",
        content: "We have three tiers: Basic ($10/mo), Pro ($25/mo), and Enterprise ($50/mo). Each comes with different features.",
        timestamp: new Date(Date.now() - 3300000).toISOString(),
        is_ai_generated: true
      }
    ],
    is_ai_active: true,
    last_message: {
      id: "msg4",
      sender_id: "admin",
      content: "We have three tiers: Basic ($10/mo), Pro ($25/mo), and Enterprise ($50/mo). Each comes with different features.",
      timestamp: new Date(Date.now() - 3300000).toISOString(),
      is_ai_generated: true
    },
    unread_count: 0
  },
  {
    id: "2",
    user: {
      id: "user2",
      username: "jane_smith",
      profile_picture: "https://via.placeholder.com/150"
    },
    messages: [
      {
        id: "msg5",
        sender_id: "user2",
        content: "Is there a free trial available?",
        timestamp: new Date(Date.now() - 1800000).toISOString(),
        is_ai_generated: false
      },
      {
        id: "msg6",
        sender_id: "admin",
        content: "Yes, we offer a 14-day free trial for all plans!",
        timestamp: new Date(Date.now() - 1700000).toISOString(),
        is_ai_generated: false
      }
    ],
    is_ai_active: false,
    last_message: {
      id: "msg6",
      sender_id: "admin",
      content: "Yes, we offer a 14-day free trial for all plans!",
      timestamp: new Date(Date.now() - 1700000).toISOString(),
      is_ai_generated: false
    },
    unread_count: 1
  }
];

export const ChatProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [chats, setChats] = useState<Chat[]>([]);
  const [activeChat, setActiveChat] = useState<Chat | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchChats = async () => {
      try {
        setLoading(true);
        try {
          // Try to get real chats from API
          const fetchedChats = await getChats();
          setChats(fetchedChats);
        } catch (error) {
          console.warn('Using mock chat data for demo');
          // Fall back to mock data if API fails
          setChats(MOCK_CHATS);
        }
        setLoading(false);
      } catch (err) {
        setError('Failed to load chats');
        setLoading(false);
      }
    };

    fetchChats();
  }, []);

  const selectActiveChat = (chatId: string) => {
    const chat = chats.find(c => c.id === chatId);
    if (chat) {
      setActiveChat(chat);
    }
  };

  const sendNewMessage = async (content: string) => {
    if (!activeChat) return;
    
    try {
      let newMessage: Chat['messages'][0];
      
      try {
        // Try to send message through API
        newMessage = await sendMessage(activeChat.id, content);
      } catch (error) {
        console.warn('Using mock message for demo');
        // Create a mock message if API fails
        newMessage = {
          id: `msg_${Date.now()}`,
          sender_id: "admin",
          content,
          timestamp: new Date().toISOString(),
          is_ai_generated: false
        };
        
        // Simulate AI response if AI is active
        if (activeChat.is_ai_active) {
          setTimeout(() => {
            const aiMessage = {
              id: `msg_${Date.now() + 1}`,
              sender_id: activeChat.user.id,
              content: "Thanks for your message! This is an automated AI response.",
              timestamp: new Date().toISOString(),
              is_ai_generated: true
            };
            
            // Update chats with AI response
            setChats(prevChats => 
              prevChats.map(chat => {
                if (chat.id === activeChat.id) {
                  return {
                    ...chat,
                    messages: [...chat.messages, aiMessage],
                    last_message: aiMessage
                  };
                }
                return chat;
              })
            );
            
            // Update active chat
            setActiveChat(prevChat => {
              if (prevChat) {
                return {
                  ...prevChat,
                  messages: [...prevChat.messages, aiMessage],
                  last_message: aiMessage
                };
              }
              return prevChat;
            });
          }, 1500);
        }
      }
      
      // Update chats state with new message
      const updatedChats = chats.map(chat => {
        if (chat.id === activeChat.id) {
          return {
            ...chat,
            messages: [...chat.messages, newMessage],
            last_message: newMessage
          };
        }
        return chat;
      });
      
      setChats(updatedChats);
      
      // Update active chat
      const updatedActiveChat = updatedChats.find(c => c.id === activeChat.id) || null;
      setActiveChat(updatedActiveChat);
      
    } catch (err) {
      setError('Failed to send message');
    }
  };

  const toggleAIActive = async (chatId: string, active: boolean) => {
    try {
      try {
        // Try to toggle AI through API
        await toggleAI(chatId, active);
      } catch (error) {
        console.warn('Mock toggling AI for demo');
        // Just continue with UI updates if API fails
      }
      
      // Update chats state with new AI active status
      const updatedChats = chats.map(chat => {
        if (chat.id === chatId) {
          return {
            ...chat,
            is_ai_active: active
          };
        }
        return chat;
      });
      
      setChats(updatedChats);
      
      // Update active chat if needed
      if (activeChat && activeChat.id === chatId) {
        setActiveChat({
          ...activeChat,
          is_ai_active: active
        });
      }
      
    } catch (err) {
      setError('Failed to toggle AI');
    }
  };

  return (
    <ChatContext.Provider
      value={{
        chats,
        activeChat,
        loading,
        error,
        setActiveChat: selectActiveChat,
        sendNewMessage,
        toggleAIActive
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = (): ChatContextType => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};


components/Auth/CallbackHandler
import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import api from '../../services/api';

const CallbackHandler: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  const { setUser } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [processing, setProcessing] = useState(true);

  // Check if we're seeing the backend's JSON response in the page
  useEffect(() => {
    const handleBackendResponse = () => {
      try {
        // If the page contains JSON data from the backend
        const pageContent = document.body.textContent || '';
        if (pageContent.includes('"message":"Authentication successful"') && 
            pageContent.includes('"access_token_received":true')) {
          
          // Extract user_id from the content if possible
          const match = pageContent.match(/"user_id":(\d+)/);
          const userId = match ? match[1] : null;
          
          if (userId) {
            // Store dummy token since backend doesn't return it
            localStorage.setItem('accessToken', 'dummy_token_for_demo');
            
            // Set user with data we have
            setUser({
              id: userId,
              username: `user_${userId.substring(0, 5)}`
            });
            
            // Navigate to dashboard
            navigate('/dashboard');
          }
        }
      } catch (err) {
        console.error('Error parsing backend response', err);
      }
    };

    // Try to handle the case where we're seeing the backend JSON response
    handleBackendResponse();

    // Check for token and user_id in URL (from updated backend)
    const searchParams = new URLSearchParams(location.search);
    const token = searchParams.get('token');
    const userId = searchParams.get('user_id');
    
    if (token && userId) {
      localStorage.setItem('accessToken', token);
      setUser({
        id: userId,
        username: `user_${userId.substring(0, 5)}`
      });
      navigate('/dashboard');
      return;
    }

    // Also check for error
    const errorMessage = searchParams.get('message');
    if (errorMessage) {
      setError(decodeURIComponent(errorMessage));
      setProcessing(false);
      return;
    }

    // If we get here, try the standard code flow
    const processAuth = async () => {
      // Get code from URL
      const code = searchParams.get('code');
      
      if (!code) {
        setError('Authorization code not received');
        setProcessing(false);
        return;
      }
      
      try {
        // Store the code in localStorage temporarily
        localStorage.setItem('instagram_code', code);
        
        // Since backend already processed the code, we'll create a temporary auth
        // Store a temporary token
        localStorage.setItem('accessToken', 'temp_token_' + Math.random().toString(36).substring(7));
        
        // Create a basic user object with the information we can extract
        const tempUser = {
          id: `temp_${Math.random().toString(36).substring(7)}`,
          username: 'Instagram User'
        };
        
        // Set the user in auth context
        setUser(tempUser);
        
        // Redirect to dashboard
        navigate('/dashboard');
      } catch (err) {
        setError('Authentication failed');
        setProcessing(false);
      }
    };

    processAuth();
  }, [location.search, navigate, setUser]);

  if (error) {
    return (
      <div className="auth-callback-container">
        <div className="auth-error">
          <h3>Authentication Error</h3>
          <p>{error}</p>
          <button onClick={() => navigate('/login')} className="retry-button">
            Return to Login
          </button>
        </div>
      </div>
    );
  }

  if (processing) {
    return (
      <div className="auth-callback-container">
        <div className="auth-processing">
          <h3>Processing Authentication</h3>
          <p>Please wait while we complete your Instagram authentication...</p>
          <div className="spinner"></div>
        </div>
      </div>
    );
  }

  return null;
};

export default CallbackHandler;


components/Auth/Login
import React from 'react';
import { useAuth } from '../../contexts/AuthContext';

const Login: React.FC = () => {
  const { login } = useAuth();

  return (
    <div className="login-container">
      <div className="login-card">
        <h2>Connect Instagram Bot</h2>
        <p>Log in with your Instagram account to manage your automated chats</p>
        <button onClick={login} className="login-button">
          Login with Instagram
        </button>
      </div>
    </div>
  );
};

export default Login;

components/Chat/AiToggle.tsx
import React from 'react';
import { useChat } from '../../contexts/ChatContext';

interface AiToggleProps {
  chatId: string;
  isActive: boolean;
}

const AiToggle: React.FC<AiToggleProps> = ({ chatId, isActive }) => {
  const { toggleAIActive } = useChat();

  const handleToggle = () => {
    toggleAIActive(chatId, !isActive);
  };

  return (
    <div className="ai-toggle">
      <span className="toggle-label">AI Active</span>
      <label className="switch">
        <input
          type="checkbox"
          checked={isActive}
          onChange={handleToggle}
        />
        <span className="slider round"></span>
      </label>
    </div>
  );
};

export default AiToggle;
components/Chat/Chatlist.tsx
import React from 'react';
import { useChat } from '../../contexts/ChatContext';

const ChatList: React.FC = () => {
  const { chats, activeChat, setActiveChat, loading, error } = useChat();

  if (loading) {
    return <div className="loading">Loading chats...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  if (chats.length === 0) {
    return <div className="empty-state">No chats available</div>;
  }

  return (
    <div className="chat-list">
      {chats.map((chat) => (
        <div
          key={chat.id}
          className={`chat-item ${activeChat?.id === chat.id ? 'active' : ''}`}
          onClick={() => setActiveChat(chat.id)}
        >
          <div className="chat-avatar">
            {chat.user.profile_picture ? (
              <img src={chat.user.profile_picture} alt={chat.user.username} />
            ) : (
              <div className="avatar-placeholder">{chat.user.username[0]}</div>
            )}
          </div>
          <div className="chat-details">
            <div className="chat-header">
              <span className="chat-username">{chat.user.username}</span>
              {chat.unread_count > 0 && (
                <span className="unread-badge">{chat.unread_count}</span>
              )}
            </div>
            {chat.last_message && (
              <div className="chat-preview">
                {chat.last_message.is_ai_generated && <span className="ai-label">AI: </span>}
                {chat.last_message.content.length > 30
                  ? `${chat.last_message.content.substring(0, 30)}...`
                  : chat.last_message.content}
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );
};

export default ChatList;

components/Chat/ChatWindow.tsx
import React, { useEffect, useRef } from 'react';
import { useChat } from '../../contexts/ChatContext';
import { useAuth } from '../../contexts/AuthContext';
import MessageInput from './MessageInput';
import AiToggle from './AiToggle';

const ChatWindow: React.FC = () => {
  const { activeChat } = useChat();
  const { authState } = useAuth();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Scroll to bottom of messages when they change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [activeChat?.messages]);

  if (!activeChat) {
    return (
      <div className="chat-window empty">
        <div className="empty-state">
          Select a chat to start messaging
        </div>
      </div>
    );
  }

  return (
    <div className="chat-window">
      <div className="chat-header">
        <div className="chat-user-info">
          <span className="chat-username">{activeChat.user.username}</span>
        </div>
        <AiToggle
          chatId={activeChat.id}
          isActive={activeChat.is_ai_active}
        />
      </div>
      
      <div className="messages-container">
        {activeChat.messages.length === 0 ? (
          <div className="empty-state">No messages yet</div>
        ) : (
          activeChat.messages.map((message) => {
            const isSelf = message.sender_id === authState.user?.id;
            
            return (
              <div
                key={message.id}
                className={`message ${isSelf ? 'self' : 'other'} ${message.is_ai_generated ? 'ai' : ''}`}
              >
                {message.is_ai_generated && <div className="ai-indicator">AI</div>}
                <div className="message-content">{message.content}</div>
                <div className="message-time">
                  {new Date(message.timestamp).toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </div>
              </div>
            );
          })
        )}
        <div ref={messagesEndRef} />
      </div>
      
      <MessageInput />
    </div>
  );
};

export default ChatWindow;
components/Chat/MessageInput.tsx
import React, { useState } from 'react';
import { useChat } from '../../contexts/ChatContext';

const MessageInput: React.FC = () => {
  const [message, setMessage] = useState('');
  const { activeChat, sendNewMessage } = useChat();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!message.trim() || !activeChat) return;
    
    await sendNewMessage(message);
    setMessage('');
  };

  if (!activeChat) return null;

  return (
    <form className="message-input-form" onSubmit={handleSubmit}>
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder={activeChat.is_ai_active ? "AI is responding automatically" : "Type a message..."}
        disabled={activeChat.is_ai_active}
        className={activeChat.is_ai_active ? "ai-active" : ""}
      />
      <button
        type="submit"
        disabled={activeChat.is_ai_active || !message.trim()}
      >
        Send
      </button>
    </form>
  );
};

export default MessageInput;


components/Layout/Header:
import React from 'react';
import { useAuth } from '../../contexts/AuthContext';

const Header: React.FC = () => {
  const { authState, logout } = useAuth();
  const { user } = authState;

  return (
    <header className="app-header">
      <div className="logo">Instagram Bot Manager</div>
      {user && (
        <div className="user-info">
          <span className="username">{user.username}</span>
          {user.profile_picture && (
            <img
              src={user.profile_picture}
              alt={user.username}
              className="profile-pic"
            />
          )}
          <button onClick={logout} className="logout-button">
            Logout
          </button>
        </div>
      )}
    </header>
  );
};

export default Header;
components/Layout/Sidebar:
import React from 'react';
import ChatList from '../Chat/ChatList';

const Sidebar: React.FC = () => {
  return (
    <div className="sidebar">
      <h3>Your Chats</h3>
      <ChatList />
    </div>
  );
};

export default Sidebar;



